;number to print in decimal is in R3.
;it will be positive.
.ORIG x3000
DIVIDE
	ST R4,SAVE_R4
	ST R3,SAVE_R3	
	ST R7,SAVE_R7
	ST R2,SAVE_R2
	ST R1,SAVE_R1

FIRSTLOOP
	AND R4,R4,#0
	ADD R4,R4,#-10
	AND R2,R2,#0
SECONDLOOP
	AND R1,R1,#0
	ADD R1,R1,R3
	ADD R1,R1,R4
	BRnz LESS
NOTYET	ADD R3,R3,R4
	ADD R2,R2,#1
	ADD R3,R3,#0
	BRz PUSH1
	ADD R3,R3,#0
	BRnzp SECONDLOOP
LESS 	
	ADD R1,R1,#0
	ADD R6,R6,#-10
	BRz EQUAL
	ADD R6,R6,#0
	BRnzp NOTYET
	AND R0,R0,#0
	ADD R0,R0,R3
	JSR PUSH
	AND R3,R3,#0
	ADD R3,R3,R2
	AND R1,R1,#0
	ADD R1,R1,R3
	ADD R1,R1,#-1
	BRz PUSH2
FINISH	NOT R4,R4
	ADD R3,R3,R4
	BRnz POPPER
	
EQUAL
	AND R0,R0,#0
	ADD R0,R0,#1
	JSR PUSH
	BRnzp POPPER

PUSH1
	
	AND R6,R6,#0
	ADD R6,R6,#10
	AND R0,R0,#0
	ADD R0,R0,R3
	JSR PUSH
	AND R3,R3,#0
	ADD R3,R3,R2
	BRnzp FIRSTLOOP
PUSH2
	AND R0,R0,#0
	ADD R0,R0,R3
	JSR PUSH
	AND R3,R3,#0
	BRz FINISH
POPPER
	AND R1,R1,#0
	ADD R1,R1,R5
	BRp DONE
	JSR POP
	LD R1,ASCII_0
	ADD R0,R0,R1
	OUT
	BRnzp POPPER

DONE	
	LD R4,SAVE_R4
	LD R3,SAVE_R3
	LD R7,SAVE_R7
	LD R2,SAVE_R2
	LD R1,SAVE_R1

	
	
ASCII_0 .FILL x30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;input R3, R4
;out R2-quotient, R0-remainder

SAVE_R4	.BLKW #1
SAVE_R3 .BLKW #1
SAVE_R7 .BLKW #1
SAVE_R2 .BLKW #1
SAVE_R1 .BLKW #1
	RET


;IN:R0, OUT:R5 (0-success, 1-fail/overflow)
;R3: STACK_END R4: STACK_TOP
;
PUSH	
	ST R3, PUSH_SaveR3	;save R3
	ST R4, PUSH_SaveR4	;save R4
	AND R5, R5, #0		;
	LD R3, STACK_END	;
	LD R4, STACk_TOP	;
	ADD R3, R3, #-1		;
	NOT R3, R3		;
	ADD R3, R3, #1		;
	ADD R3, R3, R4		;
	BRz OVERFLOW		;stack is full
	STR R0, R4, #0		;no overflow, store value in the stack
	ADD R4, R4, #-1		;move top of the stack
	ST R4, STACK_TOP	;store top of stack pointer
	BRnzp DONE_PUSH		;
OVERFLOW
	ADD R5, R5, #1		;
DONE_PUSH
	LD R3, PUSH_SaveR3	;
	LD R4, PUSH_SaveR4	;
	RET


PUSH_SaveR3	.BLKW #1	;
PUSH_SaveR4	.BLKW #1	;


;OUT: R0, OUT R5 (0-success, 1-fail/underflow)
;R3 STACK_START R4 STACK_TOP
;
POP	
	ST R3, POP_SaveR3	;save R3
	ST R4, POP_SaveR4	;save R3
	AND R5, R5, #0		;clear R5
	LD R3, STACK_START	;
	LD R4, STACK_TOP	;
	NOT R3, R3		;
	ADD R3, R3, #1		;
	ADD R3, R3, R4		;
	BRz UNDERFLOW		;
	ADD R4, R4, #1		;
	LDR R0, R4, #0		;
	ST R4, STACK_TOP	;
	BRnzp DONE_POP		;
UNDERFLOW
	ADD R5, R5, #1		;
DONE_POP
	LD R3, POP_SaveR3	;
	LD R4, POP_SaveR4	;
	RET


POP_SaveR3	.BLKW #1	;
POP_SaveR4	.BLKW #1	;
STACK_END	.FILL x3FF0	;
STACK_START	.FILL x4000	;
STACK_TOP	.FILL x4000	;

.END
