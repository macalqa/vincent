;
;
;
.ORIG x3000
	
;your code goes here
START   	GETC
		LD  R1,SEMI_COLON
		NOT R1,R1
		ADD R1,R1,R0       ;checking to see if char is a semicolon
		BRz PRINT_HEX
		LD  R1,SPACE
		NOT R1,R1
		ADD R1,R1,R0
		BRz START          ;checking to see if char is 'space'
		JSR EVALUATE
		ADD R6,R6,#1
		BRz FAIL
		BRnzp START
FAIL
	
	


SEMI_COLON .FILL x003B
SPACE      .FILL x0020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;R3- value to print in hexadecimal
PRINT_HEX

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;R0 - character input from keyboard
;R6 - current numerical output
;
;
EVALUATE

;your code goes here
		ST R7,SAVE_R7
		ST R3,SAVE_R3
		ST R1,SAVE_R1

		LD R1,NUM_MIN
		NOT R1,R1
		ADD R1,R1,R0
		BRn OPERATION   ;if char is not > x29, jumps to operation branch
		LD R1,NUM_MAX   
		AND R3,R3,#0
		ADD R3,R3,R0
		NOT R0,R0
		ADD R1,R1,R0
		BRnp NUM        ;if char is a number 0-9, branch to NUM
		AND R0,R0,#0
		ADD R0,R0,R3
		LD  R1,CARET
		NOT R1,R1
		ADD R1,R1,R0
		BRnp CHAR_FAIL ;if char is not ^, then not a valid char, fail
		JSR EXP
		AND R1,R1,#0
		ADD R1,R1,R5
		ADD R1,R1,#-1
		BRz UNDERFLOW  ;checks for underflow from EXP
		ADD R1,R1,#0	
		BRnzp EVAL_DONE
NUM
		AND R0,R0,#0
		ADD R0,R0,R3
		JSR PUSH       ;number is pushed onto stack
		BRnzp EVAL_DONE
OPERATION
		LD  R1,MULT_CHAR
		NOT R1,R1
		ADD R1,R1,R0
		BRnp CHECK1    ;checks to see if operation is multiplication
		JSR MUL
		AND R1,R1,#0
		ADD R1,R1,R5
		ADD R1,R1,#-1
		BRz UNDERFLOW  ;checks for underflow in MUL
		ADD R1,R1,#0
		BRnzp EVAL_DONE
CHECK1		
		LD R1,ADD_CHAR
		NOT R1,R1
		ADD R1,R1,R0
		BRnp CHECK2    ;checks to see if operation is add
		JSR PLUS
		AND R1,R1,#0
		ADD R1,R1,R5
		ADD R1,R1,#-1
		BRz UNDERFLOW  ;checks for underflow in PLUS
		ADD R1,R1,#0
		BRnzp EVAL_DONE

CHECK 2		
		LD R1,SUB_CHAR
		NOT R1,R1
		ADD R1,R1,R0
		BRnp SKIP1     ;checks to see if operation is subtract
		JSR MIN
		AND R1,R1,#0
		ADD R1,R1,R5
		ADD R1,R1,#-1
		BRz UNDERFLOW  ;checks for underflow in MIN
		ADD R1,R1,#0
		BRnzp EVAL_DONE
SKIP1          
	 	JSR DIV
		AND R1,R1,#0
		ADD R1,R1,R5
		ADD R1,R1,#-1
		BRz UNDERFLOW  ;checks for underflow in DIV
		ADD R1,R1,#0
		BRnzp EVAL_DONE
	
UNDERFLOW	
		AND R6,R6,#0
		ADD R6,R6,#1
		BRnzp EVAL_DONE
		
	
CHAR_FAIL
		
	
	
EVAL_DONE 
	LD R7,SAVE_R7
	LD R3,SAVE_R3
	LD R1,SAVE_R1
 	RET

MULT_CHAR .FILL x002A
ADD_CHAR  .FILL x002B
SUB_CHAR  .FILL x002D
DIV_CHAR  .FILL x002F
CARET     .FILL x005E
NUM_MAX   .FILL x0039
NUM_MIN   .FILL x0030
SAVE_R7   .BLKW #1
SAVE_R3   .BLKW #1
SAVE_R4   .BLKW #1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;input R3, R4
;out R0
PLUS	
;your code goes here
	ST R7,ADDSAVE_R7
	ST R3,ADDSAVE_R3
	ST R4,ADDSAVE_R4
	JSR POP
	AND R1,R1,#0
	ADD R1,R5,#-1
	BRz RETURN
	AND R3,R3,#0
	ADD R3,R3,R0
	JSR POP
	AND R1,R1,#0
	ADD R1,R5,#-1
	BRz RETURN
	AND R4,R4,#0
	ADD R4,R4,#0	
	ADD R0,R3,R4
	JSR PUSH
RETURN
	LD R7,ADDSAVE_R7
	LD R3,ADDSAVE_R3
	LD R4,ADDSAVE_R4
	RET

ADDSAVE_R7   .BLKW #1
ADDSAVE_R3   .BLKW #1
ADDSAVE_R4   .BLKW #1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;input R3, R4
;out R0
MIN	
;your code goes here
	ST R7,MINSAVE_R7
	ST R3,MINSAVE_R3
	ST R4,MINSAVE_R4	
	JSR POP
	AND R1,R1,#0
	ADD R1,R5,#-1
	BRz RETURN
	AND R3,R3,#0
	ADD R3,R3,R0
	JSR POP
	AND R1,R1,#0
	ADD R1,R5,#-1
	BRz RETURN
	ADD R4,R4,#0
	ADD R4,R4,R0
	NOT R3,R3
	ADD R0,R3,R4
	JSR PUSH
RETURN
	LD R7,MINSAVE_R7
	LD R3,MINSAVE_R3
	LD R4,MINSAVE_R4
	RET
	
MINSAVE_R7   .BLKW #1
MINSAVE_R3   .BLKW #1
MINSAVE_R4   .BLKW #1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;input R3, R4
;out R0
MUL	
;your code goes here
	ST R7,MULTSAVE_R7
	ST R3,MULTSAVE_R3
	ST R4,MULTSAVE_R4
	ST R2,MULTSAVE_R2
	JSR POP
	ADD R1,R1,#0
	ADD R1,R5,#-1
	BRz RETURN
	AND R3,R3,#0
	ADD R3,R3,R0
	BRz MULT_ZERO1
	JSR POP
	AND R1,R1,#0
	ADD R1,R5,#-1
	BRz RETURN
	AND R4,R4,#0
	ADD R4,R4,R0
	AND R2,R2,#0
	ADD R2,R2,R3
	BRz MULT_ZERO2
	ADD R2,R2,#0
	BRnzp MULT_REG
MULT_ZERO1
	JSR POP
	AND R1,R1,#0
	ADD R1,R5,#-1
	BRz RETURN
	AND R0,R0,#0
	JSR PUSH
	BRnzp RETURN    ;if first value is 0, pops other value and pushes in 0
MULT_ZERO2	
	AND R0,R0,#0
	JSR PUSH
	BRz RETURN
MULT_REG
	AND R6,R6,#0
	ADD R6,R6,R4
LOOP	ADD R2,R2,#-1
	ADD R4,R4,R6
	ADD R2,R2,#0
	BRz LOOP
	AND R0,R0,#0
	ADD R0,R0,R4	
	JSR PUSH
	BRnzp RETURN
RETURN 
	LD R7,MULTSAVE_R7
	LD R3,MULTSAVE_R3
	LD R4,MULTSAVE_R4
	LD R2,MULTSAVE_R2
	RET

MULTSAVE_R7   .BLKW #1
MULTSAVE_R3   .BLKW #1
MULTSAVE_R4   .BLKW #1
MULTSAVE_R2   .BLKW #1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;input R3, R4
;out R0
;DIV	
;your code goes here
	
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;input R3, R4
;out R0
;EXP
;your code goes here
	
;IN:R0, OUT:R5 (0-success, 1-fail/overflow)
;R3: STACK_END R4: STACK_TOP
;
PUSH	
	ST R3, PUSH_SaveR3	;save R3
	ST R4, PUSH_SaveR4	;save R4
	AND R5, R5, #0		;
	LD R3, STACK_END	;
	LD R4, STACk_TOP	;
	ADD R3, R3, #-1		;
	NOT R3, R3		;
	ADD R3, R3, #1		;
	ADD R3, R3, R4		;
	BRz OVERFLOW		;stack is full
	STR R0, R4, #0		;no overflow, store value in the stack
	ADD R4, R4, #-1		;move top of the stack
	ST R4, STACK_TOP	;store top of stack pointer
	BRnzp DONE_PUSH		;
OVERFLOW
	ADD R5, R5, #1		;
DONE_PUSH
	LD R3, PUSH_SaveR3	;
	LD R4, PUSH_SaveR4	;
	RET


PUSH_SaveR3	.BLKW #1	;
PUSH_SaveR4	.BLKW #1	;


;OUT: R0, OUT R5 (0-success, 1-fail/underflow)
;R3 STACK_START R4 STACK_TOP
;
POP	
	ST R3, POP_SaveR3	;save R3
	ST R4, POP_SaveR4	;save R3
	AND R5, R5, #0		;clear R5
	LD R3, STACK_START	;
	LD R4, STACK_TOP	;
	NOT R3, R3		;
	ADD R3, R3, #1		;
	ADD R3, R3, R4		;
	BRz UNDERFLOW		;
	ADD R4, R4, #1		;
	LDR R0, R4, #0		;
	ST R4, STACK_TOP	;
	BRnzp DONE_POP		;
UNDERFLOW
	ADD R5, R5, #1		;
DONE_POP
	LD R3, POP_SaveR3	;
	LD R4, POP_SaveR4	;
	RET


POP_SaveR3	.BLKW #1	;
POP_SaveR4	.BLKW #1	;
STACK_END	.FILL x3FF0	;
STACK_START	.FILL x4000	;
STACK_TOP	.FILL x4000	;


.END
